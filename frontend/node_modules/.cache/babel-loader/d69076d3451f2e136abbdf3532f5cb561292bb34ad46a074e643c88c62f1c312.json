{"ast":null,"code":"import React,{useState,useEffect}from'react';import io from'socket.io-client';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const ChatApp=()=>{const[roomId,setRoomId]=useState('');// State to hold the room ID from the URL\nconst[message,setMessage]=useState('');const[messages,setMessages]=useState([]);const socket=io();// Connect to the Socket.io server\nuseEffect(()=>{// Extract the room ID from the URL or any other available context\nconst extractedRoomId=extractRoomIdFromURL();// Implement this function to extract room ID\nif(extractedRoomId){setRoomId(extractedRoomId);socket.emit('joinRoom',extractedRoomId);// Automatically join the room\n}// Listen for new messages\nsocket.on('newMessage',newMessage=>{setMessages(prevMessages=>[...prevMessages,newMessage]);});return()=>{socket.disconnect();// Disconnect when component unmounts\n};},[socket]);// Dependency array to ensure useEffect runs once on mount\nconst sendMessage=()=>{socket.emit('sendMessage',{roomId,sender:'User',content:message});setMessage('');// Clear input field after sending message\n};// Function to extract room ID from the URL or any other context\nconst extractRoomIdFromURL=()=>{// Implement logic to extract room ID from the URL or context\n// For example:\nconst currentURL=window.location.href;// Implement logic to extract the room ID from the URL, considering your URL structure\n// Return the extracted room ID or null if not found\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"ul\",{children:messages.map((msg,index)=>/*#__PURE__*/_jsx(\"li\",{children:\"\".concat(msg.sender,\": \").concat(msg.content)},index))}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type your message\",value:message,onChange:e=>setMessage(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,children:\"Send\"})]})]});};export default ChatApp;","map":{"version":3,"names":["React","useState","useEffect","io","jsx","_jsx","jsxs","_jsxs","ChatApp","roomId","setRoomId","message","setMessage","messages","setMessages","socket","extractedRoomId","extractRoomIdFromURL","emit","on","newMessage","prevMessages","disconnect","sendMessage","sender","content","currentURL","window","location","href","children","map","msg","index","concat","type","placeholder","value","onChange","e","target","onClick"],"sources":["C:/Users/luker/SeniorProject/senior-music-project/frontend/src/Components/home-page/chat-room.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst ChatApp = () => {\r\n  const [roomId, setRoomId] = useState(''); // State to hold the room ID from the URL\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  \r\n  const socket = io(); // Connect to the Socket.io server\r\n\r\n  useEffect(() => {\r\n    // Extract the room ID from the URL or any other available context\r\n    const extractedRoomId = extractRoomIdFromURL(); // Implement this function to extract room ID\r\n    \r\n    if (extractedRoomId) {\r\n      setRoomId(extractedRoomId);\r\n      socket.emit('joinRoom', extractedRoomId); // Automatically join the room\r\n    }\r\n\r\n    // Listen for new messages\r\n    socket.on('newMessage', (newMessage) => {\r\n      setMessages(prevMessages => [...prevMessages, newMessage]);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect(); // Disconnect when component unmounts\r\n    };\r\n  }, [socket]); // Dependency array to ensure useEffect runs once on mount\r\n\r\n  const sendMessage = () => {\r\n    socket.emit('sendMessage', { roomId, sender: 'User', content: message });\r\n    setMessage(''); // Clear input field after sending message\r\n  };\r\n\r\n  // Function to extract room ID from the URL or any other context\r\n  const extractRoomIdFromURL = () => {\r\n    // Implement logic to extract room ID from the URL or context\r\n    // For example:\r\n    const currentURL = window.location.href;\r\n    // Implement logic to extract the room ID from the URL, considering your URL structure\r\n    // Return the extracted room ID or null if not found\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {/* No input field for entering the Room ID */}\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          {messages.map((msg, index) => (\r\n            <li key={index}>{`${msg.sender}: ${msg.content}`}</li>\r\n          ))}\r\n        </ul>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,EAAE,KAAM,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAElC,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CACpB,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAAE;AAC1C,KAAM,CAACU,OAAO,CAAEC,UAAU,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACY,QAAQ,CAAEC,WAAW,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAE5C,KAAM,CAAAc,MAAM,CAAGZ,EAAE,CAAC,CAAC,CAAE;AAErBD,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAc,eAAe,CAAGC,oBAAoB,CAAC,CAAC,CAAE;AAEhD,GAAID,eAAe,CAAE,CACnBN,SAAS,CAACM,eAAe,CAAC,CAC1BD,MAAM,CAACG,IAAI,CAAC,UAAU,CAAEF,eAAe,CAAC,CAAE;AAC5C,CAEA;AACAD,MAAM,CAACI,EAAE,CAAC,YAAY,CAAGC,UAAU,EAAK,CACtCN,WAAW,CAACO,YAAY,EAAI,CAAC,GAAGA,YAAY,CAAED,UAAU,CAAC,CAAC,CAC5D,CAAC,CAAC,CAEF,MAAO,IAAM,CACXL,MAAM,CAACO,UAAU,CAAC,CAAC,CAAE;AACvB,CAAC,CACH,CAAC,CAAE,CAACP,MAAM,CAAC,CAAC,CAAE;AAEd,KAAM,CAAAQ,WAAW,CAAGA,CAAA,GAAM,CACxBR,MAAM,CAACG,IAAI,CAAC,aAAa,CAAE,CAAET,MAAM,CAAEe,MAAM,CAAE,MAAM,CAAEC,OAAO,CAAEd,OAAQ,CAAC,CAAC,CACxEC,UAAU,CAAC,EAAE,CAAC,CAAE;AAClB,CAAC,CAED;AACA,KAAM,CAAAK,oBAAoB,CAAGA,CAAA,GAAM,CACjC;AACA;AACA,KAAM,CAAAS,UAAU,CAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CACvC;AACA;AACF,CAAC,CAED,mBACEtB,KAAA,QAAAuB,QAAA,eACEzB,IAAA,SAEK,CAAC,cACNE,KAAA,QAAAuB,QAAA,eACEzB,IAAA,OAAAyB,QAAA,CACGjB,QAAQ,CAACkB,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,gBACvB5B,IAAA,OAAAyB,QAAA,IAAAI,MAAA,CAAoBF,GAAG,CAACR,MAAM,OAAAU,MAAA,CAAKF,GAAG,CAACP,OAAO,GAArCQ,KAA4C,CACtD,CAAC,CACA,CAAC,cACL5B,IAAA,UACE8B,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,mBAAmB,CAC/BC,KAAK,CAAE1B,OAAQ,CACf2B,QAAQ,CAAGC,CAAC,EAAK3B,UAAU,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC7C,CAAC,cACFhC,IAAA,WAAQoC,OAAO,CAAElB,WAAY,CAAAO,QAAA,CAAC,MAAI,CAAQ,CAAC,EACxC,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAtB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}