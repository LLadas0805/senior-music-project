{"ast":null,"code":"/**\n * textFit v2.3.1\n * Previously known as jQuery.textFit\n * 11/2014 by STRML (strml.github.com)\n * MIT License\n *\n * To use: textFit(document.getElementById('target-div'), options);\n *\n * Will make the *text* content inside a container scale to fit the container\n * The container is required to have a set width and height\n * Uses binary search to fit text with minimal layout calls.\n * Version 2.0 does not use jQuery.\n */\n/*global define:true, document:true, window:true, HTMLElement:true*/\n\n(function (root, factory) {\n  \"use strict\";\n\n  // UMD shim\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // Node/CommonJS\n    module.exports = factory();\n  } else {\n    // Browser\n    root.textFit = factory();\n  }\n})(typeof global === \"object\" ? global : this, function () {\n  \"use strict\";\n\n  var defaultSettings = {\n    alignVert: false,\n    // if true, textFit will align vertically using css tables\n    alignHoriz: false,\n    // if true, textFit will set text-align: center\n    multiLine: false,\n    // if true, textFit will not set white-space: no-wrap\n    detectMultiLine: true,\n    // disable to turn off automatic multi-line sensing\n    minFontSize: 6,\n    maxFontSize: 80,\n    reProcess: true,\n    // if true, textFit will re-process already-fit nodes. Set to 'false' for better performance\n    widthOnly: false,\n    // if true, textFit will fit text to element width, regardless of text height\n    alignVertWithFlexbox: false // if true, textFit will use flexbox for vertical alignment\n  };\n  return function textFit(els, options) {\n    if (!options) options = {};\n\n    // Extend options.\n    var settings = {};\n    for (var key in defaultSettings) {\n      if (options.hasOwnProperty(key)) {\n        settings[key] = options[key];\n      } else {\n        settings[key] = defaultSettings[key];\n      }\n    }\n\n    // Convert jQuery objects into arrays\n    if (typeof els.toArray === \"function\") {\n      els = els.toArray();\n    }\n\n    // Support passing a single el\n    var elType = Object.prototype.toString.call(els);\n    if (elType !== '[object Array]' && elType !== '[object NodeList]' && elType !== '[object HTMLCollection]') {\n      els = [els];\n    }\n\n    // Process each el we've passed.\n    for (var i = 0; i < els.length; i++) {\n      processItem(els[i], settings);\n    }\n  };\n\n  /**\n   * The meat. Given an el, make the text inside it fit its parent.\n   * @param  {DOMElement} el       Child el.\n   * @param  {Object} settings     Options for fit.\n   */\n  function processItem(el, settings) {\n    if (!isElement(el) || !settings.reProcess && el.getAttribute('textFitted')) {\n      return false;\n    }\n\n    // Set textFitted attribute so we know this was processed.\n    if (!settings.reProcess) {\n      el.setAttribute('textFitted', 1);\n    }\n    var innerSpan, originalHeight, originalHTML, originalWidth;\n    var low, mid, high;\n\n    // Get element data.\n    originalHTML = el.innerHTML;\n    originalWidth = innerWidth(el);\n    originalHeight = innerHeight(el);\n\n    // Don't process if we can't find box dimensions\n    if (!originalWidth || !settings.widthOnly && !originalHeight) {\n      if (!settings.widthOnly) throw new Error('Set a static height and width on the target element ' + el.outerHTML + ' before using textFit!');else throw new Error('Set a static width on the target element ' + el.outerHTML + ' before using textFit!');\n    }\n\n    // Add textFitted span inside this container.\n    if (originalHTML.indexOf('textFitted') === -1) {\n      innerSpan = document.createElement('span');\n      innerSpan.className = 'textFitted';\n      // Inline block ensure it takes on the size of its contents, even if they are enclosed\n      // in other tags like <p>\n      innerSpan.style['display'] = 'inline-block';\n      innerSpan.innerHTML = originalHTML;\n      el.innerHTML = '';\n      el.appendChild(innerSpan);\n    } else {\n      // Reprocessing.\n      innerSpan = el.querySelector('span.textFitted');\n      // Remove vertical align if we're reprocessing.\n      if (hasClass(innerSpan, 'textFitAlignVert')) {\n        innerSpan.className = innerSpan.className.replace('textFitAlignVert', '');\n        innerSpan.style['height'] = '';\n        el.className.replace('textFitAlignVertFlex', '');\n      }\n    }\n\n    // Prepare & set alignment\n    if (settings.alignHoriz) {\n      el.style['text-align'] = 'center';\n      innerSpan.style['text-align'] = 'center';\n    }\n\n    // Check if this string is multiple lines\n    // Not guaranteed to always work if you use wonky line-heights\n    var multiLine = settings.multiLine;\n    if (settings.detectMultiLine && !multiLine && innerSpan.scrollHeight >= parseInt(window.getComputedStyle(innerSpan)['font-size'], 10) * 2) {\n      multiLine = true;\n    }\n\n    // If we're not treating this as a multiline string, don't let it wrap.\n    if (!multiLine) {\n      el.style['white-space'] = 'nowrap';\n    }\n    low = settings.minFontSize;\n    high = settings.maxFontSize;\n\n    // Binary search for highest best fit\n    var size = low;\n    while (low <= high) {\n      mid = high + low >> 1;\n      innerSpan.style.fontSize = mid + 'px';\n      if (innerSpan.scrollWidth <= originalWidth && (settings.widthOnly || innerSpan.scrollHeight <= originalHeight)) {\n        size = mid;\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n      // await injection point\n    }\n    // found, updating font if differs:\n    if (innerSpan.style.fontSize != size + 'px') innerSpan.style.fontSize = size + 'px';\n\n    // Our height is finalized. If we are aligning vertically, set that up.\n    if (settings.alignVert) {\n      addStyleSheet();\n      var height = innerSpan.scrollHeight;\n      if (window.getComputedStyle(el)['position'] === \"static\") {\n        el.style['position'] = 'relative';\n      }\n      if (!hasClass(innerSpan, \"textFitAlignVert\")) {\n        innerSpan.className = innerSpan.className + \" textFitAlignVert\";\n      }\n      innerSpan.style['height'] = height + \"px\";\n      if (settings.alignVertWithFlexbox && !hasClass(el, \"textFitAlignVertFlex\")) {\n        el.className = el.className + \" textFitAlignVertFlex\";\n      }\n    }\n  }\n\n  // Calculate height without padding.\n  function innerHeight(el) {\n    var style = window.getComputedStyle(el, null);\n    return el.clientHeight - parseInt(style.getPropertyValue('padding-top'), 10) - parseInt(style.getPropertyValue('padding-bottom'), 10);\n  }\n\n  // Calculate width without padding.\n  function innerWidth(el) {\n    var style = window.getComputedStyle(el, null);\n    return el.clientWidth - parseInt(style.getPropertyValue('padding-left'), 10) - parseInt(style.getPropertyValue('padding-right'), 10);\n  }\n\n  //Returns true if it is a DOM element\n  function isElement(o) {\n    return typeof HTMLElement === \"object\" ? o instanceof HTMLElement :\n    //DOM2\n    o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n  }\n  function hasClass(element, cls) {\n    return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;\n  }\n\n  // Better than a stylesheet dependency\n  function addStyleSheet() {\n    if (document.getElementById(\"textFitStyleSheet\")) return;\n    var style = [\".textFitAlignVert{\", \"position: absolute;\", \"top: 0; right: 0; bottom: 0; left: 0;\", \"margin: auto;\", \"display: flex;\", \"justify-content: center;\", \"flex-direction: column;\", \"}\", \".textFitAlignVertFlex{\", \"display: flex;\", \"}\", \".textFitAlignVertFlex .textFitAlignVert{\", \"position: static;\", \"}\"].join(\"\");\n    var css = document.createElement(\"style\");\n    css.type = \"text/css\";\n    css.id = \"textFitStyleSheet\";\n    css.innerHTML = style;\n    document.body.appendChild(css);\n  }\n});","map":{"version":3,"names":["root","factory","define","amd","exports","module","textFit","global","defaultSettings","alignVert","alignHoriz","multiLine","detectMultiLine","minFontSize","maxFontSize","reProcess","widthOnly","alignVertWithFlexbox","els","options","settings","key","hasOwnProperty","toArray","elType","Object","prototype","toString","call","i","length","processItem","el","isElement","getAttribute","setAttribute","innerSpan","originalHeight","originalHTML","originalWidth","low","mid","high","innerHTML","innerWidth","innerHeight","Error","outerHTML","indexOf","document","createElement","className","style","appendChild","querySelector","hasClass","replace","scrollHeight","parseInt","window","getComputedStyle","size","fontSize","scrollWidth","addStyleSheet","height","clientHeight","getPropertyValue","clientWidth","o","HTMLElement","nodeType","nodeName","element","cls","getElementById","join","css","type","id","body"],"sources":["C:/Users/luker/SeniorProject/senior-music-project/frontend/node_modules/textfit/textFit.js"],"sourcesContent":["/**\n * textFit v2.3.1\n * Previously known as jQuery.textFit\n * 11/2014 by STRML (strml.github.com)\n * MIT License\n *\n * To use: textFit(document.getElementById('target-div'), options);\n *\n * Will make the *text* content inside a container scale to fit the container\n * The container is required to have a set width and height\n * Uses binary search to fit text with minimal layout calls.\n * Version 2.0 does not use jQuery.\n */\n/*global define:true, document:true, window:true, HTMLElement:true*/\n\n(function(root, factory) {\n  \"use strict\";\n\n  // UMD shim\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // Node/CommonJS\n    module.exports = factory();\n  } else {\n    // Browser\n    root.textFit = factory();\n  }\n\n}(typeof global === \"object\" ? global : this, function () {\n  \"use strict\";\n\n  var defaultSettings = {\n    alignVert: false, // if true, textFit will align vertically using css tables\n    alignHoriz: false, // if true, textFit will set text-align: center\n    multiLine: false, // if true, textFit will not set white-space: no-wrap\n    detectMultiLine: true, // disable to turn off automatic multi-line sensing\n    minFontSize: 6,\n    maxFontSize: 80,\n    reProcess: true, // if true, textFit will re-process already-fit nodes. Set to 'false' for better performance\n    widthOnly: false, // if true, textFit will fit text to element width, regardless of text height\n    alignVertWithFlexbox: false, // if true, textFit will use flexbox for vertical alignment\n  };\n\n  return function textFit(els, options) {\n\n    if (!options) options = {};\n\n    // Extend options.\n    var settings = {};\n    for(var key in defaultSettings){\n      if(options.hasOwnProperty(key)){\n        settings[key] = options[key];\n      } else {\n        settings[key] = defaultSettings[key];\n      }\n    }\n\n    // Convert jQuery objects into arrays\n    if (typeof els.toArray === \"function\") {\n      els = els.toArray();\n    }\n\n    // Support passing a single el\n    var elType = Object.prototype.toString.call(els);\n    if (elType !== '[object Array]' && elType !== '[object NodeList]' &&\n            elType !== '[object HTMLCollection]'){\n      els = [els];\n    }\n\n    // Process each el we've passed.\n    for(var i = 0; i < els.length; i++){\n      processItem(els[i], settings);\n    }\n  };\n\n  /**\n   * The meat. Given an el, make the text inside it fit its parent.\n   * @param  {DOMElement} el       Child el.\n   * @param  {Object} settings     Options for fit.\n   */\n  function processItem(el, settings){\n    if (!isElement(el) || (!settings.reProcess && el.getAttribute('textFitted'))) {\n      return false;\n    }\n\n    // Set textFitted attribute so we know this was processed.\n    if(!settings.reProcess){\n      el.setAttribute('textFitted', 1);\n    }\n\n    var innerSpan, originalHeight, originalHTML, originalWidth;\n    var low, mid, high;\n\n    // Get element data.\n    originalHTML = el.innerHTML;\n    originalWidth = innerWidth(el);\n    originalHeight = innerHeight(el);\n\n    // Don't process if we can't find box dimensions\n    if (!originalWidth || (!settings.widthOnly && !originalHeight)) {\n      if(!settings.widthOnly)\n        throw new Error('Set a static height and width on the target element ' + el.outerHTML +\n          ' before using textFit!');\n      else\n        throw new Error('Set a static width on the target element ' + el.outerHTML +\n          ' before using textFit!');\n    }\n\n    // Add textFitted span inside this container.\n    if (originalHTML.indexOf('textFitted') === -1) {\n      innerSpan = document.createElement('span');\n      innerSpan.className = 'textFitted';\n      // Inline block ensure it takes on the size of its contents, even if they are enclosed\n      // in other tags like <p>\n      innerSpan.style['display'] = 'inline-block';\n      innerSpan.innerHTML = originalHTML;\n      el.innerHTML = '';\n      el.appendChild(innerSpan);\n    } else {\n      // Reprocessing.\n      innerSpan = el.querySelector('span.textFitted');\n      // Remove vertical align if we're reprocessing.\n      if (hasClass(innerSpan, 'textFitAlignVert')){\n        innerSpan.className = innerSpan.className.replace('textFitAlignVert', '');\n        innerSpan.style['height'] = '';\n        el.className.replace('textFitAlignVertFlex', '');\n      }\n    }\n\n    // Prepare & set alignment\n    if (settings.alignHoriz) {\n      el.style['text-align'] = 'center';\n      innerSpan.style['text-align'] = 'center';\n    }\n\n    // Check if this string is multiple lines\n    // Not guaranteed to always work if you use wonky line-heights\n    var multiLine = settings.multiLine;\n    if (settings.detectMultiLine && !multiLine &&\n        innerSpan.scrollHeight >= parseInt(window.getComputedStyle(innerSpan)['font-size'], 10) * 2){\n      multiLine = true;\n    }\n\n    // If we're not treating this as a multiline string, don't let it wrap.\n    if (!multiLine) {\n      el.style['white-space'] = 'nowrap';\n    }\n\n    low = settings.minFontSize;\n    high = settings.maxFontSize;\n\n    // Binary search for highest best fit\n    var size = low;\n    while (low <= high) {\n      mid = (high + low) >> 1;\n      innerSpan.style.fontSize = mid + 'px';\n      if(innerSpan.scrollWidth <= originalWidth && (settings.widthOnly || innerSpan.scrollHeight <= originalHeight)){\n        size = mid;\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n      // await injection point\n    }\n    // found, updating font if differs:\n    if( innerSpan.style.fontSize != size + 'px' ) innerSpan.style.fontSize = size + 'px';\n\n    // Our height is finalized. If we are aligning vertically, set that up.\n    if (settings.alignVert) {\n      addStyleSheet();\n      var height = innerSpan.scrollHeight;\n      if (window.getComputedStyle(el)['position'] === \"static\"){\n        el.style['position'] = 'relative';\n      }\n      if (!hasClass(innerSpan, \"textFitAlignVert\")){\n        innerSpan.className = innerSpan.className + \" textFitAlignVert\";\n      }\n      innerSpan.style['height'] = height + \"px\";\n      if (settings.alignVertWithFlexbox && !hasClass(el, \"textFitAlignVertFlex\")) {\n        el.className = el.className + \" textFitAlignVertFlex\";\n      }\n    }\n  }\n\n  // Calculate height without padding.\n  function innerHeight(el){\n    var style = window.getComputedStyle(el, null);\n    return el.clientHeight -\n      parseInt(style.getPropertyValue('padding-top'), 10) -\n      parseInt(style.getPropertyValue('padding-bottom'), 10);\n  }\n\n  // Calculate width without padding.\n  function innerWidth(el){\n    var style = window.getComputedStyle(el, null);\n    return el.clientWidth -\n      parseInt(style.getPropertyValue('padding-left'), 10) -\n      parseInt(style.getPropertyValue('padding-right'), 10);\n  }\n\n  //Returns true if it is a DOM element\n  function isElement(o){\n    return (\n      typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n      o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName===\"string\"\n    );\n  }\n\n  function hasClass(element, cls) {\n    return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;\n  }\n\n  // Better than a stylesheet dependency\n  function addStyleSheet() {\n    if (document.getElementById(\"textFitStyleSheet\")) return;\n    var style = [\n      \".textFitAlignVert{\",\n        \"position: absolute;\",\n        \"top: 0; right: 0; bottom: 0; left: 0;\",\n        \"margin: auto;\",\n        \"display: flex;\",\n        \"justify-content: center;\",\n        \"flex-direction: column;\",\n      \"}\",\n      \".textFitAlignVertFlex{\",\n        \"display: flex;\",\n      \"}\",\n      \".textFitAlignVertFlex .textFitAlignVert{\",\n        \"position: static;\",\n      \"}\",].join(\"\");\n\n    var css = document.createElement(\"style\");\n    css.type = \"text/css\";\n    css.id = \"textFitStyleSheet\";\n    css.innerHTML = style;\n    document.body.appendChild(css);\n  }\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}